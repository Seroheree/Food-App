{"version":3,"sources":["Components/Main/Dish/Dish.module.css","Components/Main/Main.module.css","Components/Main/Nav/Nav.module.css","Components/PseudoDB.js","Components/Main/Dish/Dish.js","Components/Main/Whole.js","Components/Main/Nav/Nav.js","Components/Main/AddView/AddView.js","Components/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","DataBase","name","kcal","proteins","carb","fat","Dish","props","counter","useState","dataBase","food","searchState","setSearchState","values","setValues","addedFood","setAddedFood","useEffect","map","el","takeValue","length","className","Style","dish","add","type","placeholder","onChange","e","target","value","autoFocus","list","id","addButton","onClick","filter","foodInfo","Whole","setWhole","check","prevProps","nextProps","React","memo","Nav","mainState","setMainState","takeSendNav","navButton","AddView","Main","state","setState","refresh","setRefresh","block","setBlock","countAll","term","useMemo","changePage","setChangePage","diaryBox","footerButton","alert","ulBox","calories","document","querySelectorAll","carbs","forEach","parseInt","textContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e4e1a892.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dish\":\"Dish_dish__3kL0b\",\"dishBlink\":\"Dish_dishBlink__omi8u\",\"add\":\"Dish_add__yTw7H\",\"addButton\":\"Dish_addButton__3Zo9_\",\"addedFood\":\"Dish_addedFood__PqByE\",\"foodInfo\":\"Dish_foodInfo__1mRcm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"diaryBox\":\"Main_diaryBox__l0TCU\",\"ulBox\":\"Main_ulBox__3Ru01\",\"footerButton\":\"Main_footerButton__16WcU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navButton\":\"Nav_navButton__3dEE2\"};","export const DataBase=[\r\n    {\r\n        name:'chleb',\r\n        kcal:258,\r\n        proteins:9.3,\r\n        carb:51,\r\n        fat:1\r\n    },\r\n    {\r\n        name:'jajka',\r\n        kcal:140,\r\n        proteins:12,\r\n        carb:0,\r\n        fat:10\r\n    },\r\n    {\r\n        name:'pierś',\r\n        kcal:200,\r\n        proteins:22,\r\n        carb:0,\r\n        fat:1\r\n    }\r\n]","import Style from './Dish.module.css'\r\nimport React, {useState, useEffect} from 'react'\r\nimport {DataBase} from '../../PseudoDB'\r\nconst Dish=(props)=>{\r\n    let counter=0\r\n    const [food,setFood]=useState(props.dataBase)       //Food Database\r\n    const [searchState, setSearchState]=useState('')     //State of Searcher Value\r\n    \r\n    const [values, setValues]=useState({                //state of added values\r\n        kcal:0,\r\n        proteins:0,\r\n        carb:0,\r\n        fat:0\r\n    })\r\n    const [addedFood, setAddedFood]=useState([])        //State of added food(list)\r\n    const setAll=()=>[...addedFood].map(el=>{\r\n            setValues(\r\n                {\r\n                    kcal:values.kcal+el.kcal,\r\n                    proteins:values.proteins+el.proteins,\r\n                    carb:values.carb+el.carb,\r\n                    fat:values.fat+el.fat\r\n                })\r\n        })\r\n    const send=()=> props.takeValue(addedFood.length) //send info about array length to refresh by memo etc\r\n    \r\n\r\n    const Filter=()=>{\r\n        if(searchState==='')return\r\n        else{\r\n        [...food].filter(el=>el.name===searchState\r\n            ? setAddedFood ([...addedFood,el])\r\n            : counter++)\r\n        if(counter===food.length) {counter=0 ;return}\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setAll()\r\n        send()\r\n    },[addedFood.length])\r\n\r\n    \r\n\r\n    \r\n    return(\r\n        <div className={Style.dish}>\r\n            <div>\r\n\r\n            </div>\r\n            <div className={Style.add}>\r\n                    <label>Dodaj jedzenie</label>\r\n                    <div>\r\n                        <input type=\"text\" placeholder=\"Szukaj..\"\r\n                            onChange={e=>setSearchState(e.target.value)}\r\n                            autoFocus\r\n                            list=\"foodList\"\r\n                        ></input>\r\n\r\n                        <datalist id=\"foodList\">\r\n                            {food.map(el=><option value={el.name}>{el.kcal}</option>)}\r\n                        </datalist>\r\n\r\n           \r\n                        \r\n                        \r\n                        <button\r\n                        className={Style.addButton}\r\n                            onClick={\r\n                                \r\n                                ()=>{Filter()}}>+</button>\r\n\r\n\r\n\r\n                                \r\n                    </div>\r\n                   \r\n            </div>\r\n\r\n            <div className={Style.addedFood}>\r\n              <ul>{addedFood.map(el=><li>{el.name}</li>)}</ul>\r\n            </div>\r\n\r\n\r\n            <div className={Style.foodInfo}>\r\n                <div>\r\n                    <p>Kalorie </p>\r\n                    <p  className=\"kcal\">{values.kcal}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>Białko</p>\r\n                    <p className=\"proteins\">{ values.proteins}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>Węglowodany</p>\r\n                    <p className=\"carbs\">{values.carb}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>Tłuszcze</p>\r\n                    <p className=\"fat\">{values.fat}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dish","import Style from './Main.module.css'\r\nimport React,{ useState, useMemo } from 'react'\r\nconst Whole=(props)=>{\r\n\r\n    const setWhole=props.setWhole()\r\n    \r\n    return(\r\n        <ul>\r\n        <li>Kcal:  {setWhole.kcal/2}</li>\r\n        <li>Białko: {setWhole.proteins/2}</li>\r\n        <li>Węglowodany: {setWhole.carb/2}</li>\r\n        <li>Tłuszcze: {setWhole.fat/2}</li>\r\n    </ul>\r\n    )\r\n}\r\n\r\nconst check=(prevProps,nextProps)=>{\r\n    return prevProps===nextProps\r\n}\r\nexport default React.memo(Whole,check)","import Style from './Nav.module.css'\r\nimport {useState} from 'react'\r\nconst Nav=(props)=>{\r\n    const [mainState,setMainState]=useState(true)\r\n    const send=()=>{\r\n        props.takeSendNav(mainState)\r\n    }\r\n    send()\r\n    return(\r\n        <nav>\r\n\r\n                <button className={Style.navButton}\r\n                    onClick={()=>setMainState(true)}\r\n                >Dziennik</button>\r\n                <button className={Style.navButton}\r\n                     onClick={()=>setMainState(false)}\r\n                >Dodaj własne produkty</button>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav","import Style from './AddView.module.css'\r\n\r\nconst AddView=()=>{\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddView","import Style from './Main.module.css'\r\nimport Dish from './Dish/Dish'\r\nimport React, { useState, useEffect, useMemo} from 'react'\r\nimport Whole from './Whole'\r\nimport Nav from './Nav/Nav'\r\nimport AddView from './AddView/AddView'\r\nconst Main=(props)=>{\r\n    const [state, setState]=useState([]) //State of Component\r\n    const [refresh,setRefresh]=useState(0) //State of Refresh value\r\n    const [block,setBlock]=useState(true)   //State of block 'add new food' without fill earlier dish\r\n    let countAll={\r\n        kcal:0,\r\n        proteins:0,\r\n        carb:0,\r\n        fat:0\r\n    }\r\n        const setWhole=()=>{\r\n            const calories=document.querySelectorAll('.kcal')\r\n            const proteins=document.querySelectorAll('.proteins')\r\n            const carbs=document.querySelectorAll('.carbs')\r\n            const fat=document.querySelectorAll('.fat')\r\n            calories.forEach(el=>{\r\n                countAll.kcal=countAll.kcal+parseInt(el.textContent)\r\n            })\r\n\r\n            proteins.forEach(el=>{\r\n                countAll.proteins=countAll.proteins+parseInt(el.textContent)\r\n               \r\n            })\r\n\r\n            carbs.forEach(el=>{\r\n                countAll.carbs=countAll.carbs+parseInt(el.textContent)\r\n               \r\n            })\r\n\r\n            fat.forEach(el=>{\r\n                countAll.fat=countAll.fat+parseInt(el.textContent)\r\n               \r\n            })\r\n            setRefresh(1)\r\n            setRefresh(0)\r\n            return countAll\r\n        }\r\n        \r\n\r\n  \r\n        const takeValue=(term)=>setRefresh(term)            //Dish length to refresh page\r\n        const takeValueMemo=useMemo(()=>{\r\n            setBlock(true)\r\n            return takeValue\r\n        },[refresh])\r\n\r\n        const [changePage,setChangePage]=useState(true)    //Actual page(diary or add products)\r\n        const takeSendNav=(term)=> setChangePage(term)     // Takes props from nav\r\n\r\n    return(\r\n\r\n        <div className={Style.diaryBox} >\r\n            <Nav takeSendNav={takeSendNav}/>\r\n                \r\n                    { changePage ? state : <AddView/>}\r\n\r\n            <footer>\r\n                <div>\r\n                    <button\r\n                    className={Style.footerButton}\r\n                        onClick={\r\n                            ()=>{\r\n                            block ? (\r\n                            setState([...state,<Dish \r\n                                    dataBase={props.dataBase} \r\n                                    takeValue={takeValue}\r\n                                    key={state.length} />]))\r\n                                : alert ('Zaktualizuj dane o posiłku przed dodaniem nowego ') \r\n                                 if(refresh===0) setBlock(false)\r\n                        }}>+</button>\r\n                </div>\r\n                \r\n                <div className={Style.ulBox}>\r\n                    <Whole setWhole={setWhole}/>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","import './App.css';\nimport {DataBase} from './Components/PseudoDB'\nimport Main from './Components/Main/Main'\nimport {useState} from 'react'\nimport Nav from './Components/Main/Nav/Nav'\n\n\n\nfunction App() {\n\n  \n  return (\n\n    \n    <div className=\"App\">\n      <Main dataBase={DataBase} />\n\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}